"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addClientImports = void 0;
const apis_1 = require("../apis");
const ts_type_1 = require("../ts-type");
const addClientDefaultImport_1 = require("./addClientDefaultImport");
const addClientNamedImport_1 = require("./addClientNamedImport");
const getClientTSTypeRefCount_1 = require("./getClientTSTypeRefCount");
const getDocClientNewExpressionCount_1 = require("./getDocClientNewExpressionCount");
const getNewExpressionCount_1 = require("./getNewExpressionCount");
const addClientImports = (j, source, options) => {
    const v3ClientTypesCount = (0, ts_type_1.getV3ClientTypesCount)(j, source, options);
    const newExpressionCount = (0, getNewExpressionCount_1.getNewExpressionCount)(j, source, options);
    const clientTSTypeRefCount = (0, getClientTSTypeRefCount_1.getClientTSTypeRefCount)(j, source, options);
    const waiterStates = (0, apis_1.getClientWaiterStates)(j, source, options);
    // Add default import for types, if needed.
    if (v3ClientTypesCount > 0) {
        (0, addClientDefaultImport_1.addClientDefaultImport)(j, source, options);
    }
    if (newExpressionCount > 0 || clientTSTypeRefCount > 0) {
        (0, addClientNamedImport_1.addClientNamedImport)(j, source, {
            ...options,
            importedName: options.v3ClientName,
            localName: options.v2ClientLocalName,
        });
    }
    for (const waiterState of waiterStates) {
        const v3WaiterApiName = (0, apis_1.getV3ClientWaiterApiName)(waiterState);
        (0, addClientNamedImport_1.addClientNamedImport)(j, source, {
            ...options,
            importedName: v3WaiterApiName,
        });
    }
    if ((0, apis_1.isS3UploadApiUsed)(j, source, options)) {
        (0, addClientNamedImport_1.addClientNamedImport)(j, source, {
            ...options,
            importedName: "Upload",
            v3ClientPackageName: "@aws-sdk/lib-storage",
        });
    }
    const docClientNewExpressionCount = (0, getDocClientNewExpressionCount_1.getDocClientNewExpressionCount)(j, source, options);
    if (docClientNewExpressionCount > 0) {
        (0, addClientNamedImport_1.addClientNamedImport)(j, source, {
            ...options,
            importedName: "DynamoDBDocument",
            v3ClientPackageName: "@aws-sdk/lib-dynamodb",
        });
    }
};
exports.addClientImports = addClientImports;
