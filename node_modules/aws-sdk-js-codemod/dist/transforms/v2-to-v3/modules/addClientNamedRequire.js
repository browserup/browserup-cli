"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addClientNamedRequire = void 0;
const config_1 = require("../config");
const utils_1 = require("../utils");
const getRequireDeclarator_1 = require("./getRequireDeclarator");
const getRequireDeclarators_1 = require("./getRequireDeclarators");
const getRequireDeclaratorsWithIdentifier_1 = require("./getRequireDeclaratorsWithIdentifier");
const getRequireProperty_1 = require("./getRequireProperty");
const objectPatternPropertyCompareFn_1 = require("./objectPatternPropertyCompareFn");
const addClientNamedRequire = (j, source, options) => {
    const { keyName, v2ClientName, v2ClientLocalName, v2GlobalName, v3ClientPackageName } = options;
    const valueName = options.valueName ?? keyName;
    const defaultLocalName = (0, utils_1.getDefaultLocalName)(v2ClientLocalName);
    const clientObjectProperty = (0, getRequireProperty_1.getRequireProperty)(j, { keyName, valueName });
    const existingRequires = (0, getRequireDeclarators_1.getRequireDeclarators)(j, source, v3ClientPackageName);
    if (existingRequires && existingRequires.nodes().length > 0) {
        const existingRequireProperties = existingRequires
            .filter((variableDeclarator) => variableDeclarator.value.id.type === "ObjectPattern")
            .nodes();
        if (existingRequireProperties.length > 0 &&
            existingRequireProperties.find((variableDeclarator) => variableDeclarator.id.type === "ObjectPattern" &&
                variableDeclarator.id.properties.find((property) => {
                    if (!config_1.OBJECT_PROPERTY_TYPE_LIST.includes(property.type))
                        return false;
                    const key = property.key;
                    const value = property.value;
                    if (key.type !== "Identifier" || value.type !== "Identifier") {
                        return false;
                    }
                    return key.name === keyName && value.name === valueName;
                }))) {
            return;
        }
        const requireDeclaratorsWithIdentifier = (0, getRequireDeclaratorsWithIdentifier_1.getRequireDeclaratorsWithIdentifier)(j, source, {
            identifierName: defaultLocalName,
            sourceValue: v3ClientPackageName,
        });
        if (requireDeclaratorsWithIdentifier && requireDeclaratorsWithIdentifier.nodes().length > 0) {
            requireDeclaratorsWithIdentifier.at(0).insertAfter(j.variableDeclarator(j.objectPattern([clientObjectProperty]), {
                type: "Identifier",
                name: defaultLocalName,
            }));
            return;
        }
        if (existingRequireProperties.length > 0) {
            const firstRequireProperties = existingRequireProperties[0].id.properties;
            firstRequireProperties.push(clientObjectProperty);
            firstRequireProperties.sort(objectPatternPropertyCompareFn_1.objectPatternPropertyCompareFn);
            return;
        }
    }
    const v3RequireDeclarator = j.variableDeclarator(j.objectPattern([clientObjectProperty]), j.callExpression(j.identifier("require"), [j.literal(v3ClientPackageName)]));
    // prettier-ignore
    const v2RequireDeclarator = (0, getRequireDeclarator_1.getRequireDeclarator)(j, source, { v2ClientName, v2ClientLocalName, v2GlobalName });
    if (v2RequireDeclarator && v2RequireDeclarator.nodes().length > 0) {
        v2RequireDeclarator.insertAfter(v3RequireDeclarator);
    }
    else {
        // Unreachable code, throw error
        throw new Error("Base Require Declarator not found to insert new Require Declarator.\n" +
            "Please report your use case on https://github.com/awslabs/aws-sdk-js-codemod");
    }
};
exports.addClientNamedRequire = addClientNamedRequire;
