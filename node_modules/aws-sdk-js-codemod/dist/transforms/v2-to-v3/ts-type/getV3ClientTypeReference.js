"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getV3ClientTypeReference = void 0;
const config_1 = require("../config");
const utils_1 = require("../utils");
const getTypeRefForString_1 = require("./getTypeRefForString");
const getTypeRefWithV3ClientDefaultLocalName = (j, v3ClientDefaultLocalName, v3ClientTypeName) => j.tsTypeReference(j.identifier([v3ClientDefaultLocalName, v3ClientTypeName].join(".")));
const getV3ClientTypeReference = (j, { v2ClientLocalName, v2ClientName, v2ClientTypeName }) => {
    const clientTypesMap = config_1.CLIENT_TYPES_MAP[v2ClientName];
    const defaultLocalName = (0, utils_1.getDefaultLocalName)(v2ClientLocalName);
    if (Object.keys(clientTypesMap).includes(v2ClientTypeName)) {
        return (0, getTypeRefForString_1.getTypeRefForString)(j, defaultLocalName, clientTypesMap[v2ClientTypeName]);
    }
    for (const inputSuffix of config_1.V2_CLIENT_INPUT_SUFFIX_LIST) {
        if (v2ClientTypeName.endsWith(inputSuffix)) {
            return getTypeRefWithV3ClientDefaultLocalName(j, defaultLocalName, v2ClientTypeName.replace(new RegExp(`${inputSuffix}$`), "CommandInput"));
        }
    }
    for (const outputSuffix of config_1.V2_CLIENT_OUTPUT_SUFFIX_LIST) {
        if (v2ClientTypeName.endsWith(outputSuffix)) {
            return getTypeRefWithV3ClientDefaultLocalName(j, defaultLocalName, v2ClientTypeName.replace(new RegExp(`${outputSuffix}$`), "CommandOutput"));
        }
    }
    return getTypeRefWithV3ClientDefaultLocalName(j, defaultLocalName, v2ClientTypeName);
};
exports.getV3ClientTypeReference = getV3ClientTypeReference;
