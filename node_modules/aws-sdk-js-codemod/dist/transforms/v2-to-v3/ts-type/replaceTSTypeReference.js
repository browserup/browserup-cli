"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.replaceTSTypeReference = void 0;
const utils_1 = require("../utils");
const getClientTypeNames_1 = require("./getClientTypeNames");
const getV3ClientTypeReference_1 = require("./getV3ClientTypeReference");
const isRightSectionIdentifier = (node) => node.typeName.right.type === "Identifier";
const getRightIdentifierName = (node) => node.typeName.right.name;
const getIdentifierName = (node) => node.typeName.name;
// Replace v2 client type reference with v3 client type reference.
const replaceTSTypeReference = (j, source, { v2ClientName, v2ClientLocalName, v2GlobalName, v3ClientName }) => {
    // Replace type reference to client created with global name.
    if (v2GlobalName) {
        source
            .find(j.TSTypeReference, (0, utils_1.getClientTSTypeRef)({ v2ClientName, v2GlobalName }))
            .replaceWith((v2ClientType) => j.tsTypeReference(j.identifier(v3ClientName), v2ClientType.node.typeParameters));
        // Replace reference to client types created with global name.
        source
            .find(j.TSTypeReference, (0, utils_1.getClientTSTypeRef)({ v2ClientName, v2GlobalName, withoutRightSection: true }))
            .filter((v2ClientType) => isRightSectionIdentifier(v2ClientType.node))
            .replaceWith((v2ClientType) => {
            const v2ClientTypeName = getRightIdentifierName(v2ClientType.node);
            return (0, getV3ClientTypeReference_1.getV3ClientTypeReference)(j, { v2ClientName, v2ClientTypeName, v2ClientLocalName });
        });
    }
    // Replace reference to client types created with client module.
    source
        .find(j.TSTypeReference, (0, utils_1.getClientTSTypeRef)({ v2ClientLocalName, withoutRightSection: true }))
        .filter((v2ClientType) => isRightSectionIdentifier(v2ClientType.node))
        .replaceWith((v2ClientType) => {
        const v2ClientTypeName = getRightIdentifierName(v2ClientType.node);
        return (0, getV3ClientTypeReference_1.getV3ClientTypeReference)(j, { v2ClientName, v2ClientTypeName, v2ClientLocalName });
    });
    // Replace type reference to client type with modules.
    const clientTypeNames = (0, getClientTypeNames_1.getClientTypeNames)(j, source, {
        v2ClientLocalName,
        v2ClientName,
        v2GlobalName,
    });
    for (const clientTypeName of clientTypeNames) {
        source
            .find(j.TSTypeReference, { typeName: { type: "Identifier", name: clientTypeName } })
            .replaceWith((v2ClientType) => {
            const v2ClientTypeName = getIdentifierName(v2ClientType.node);
            return (0, getV3ClientTypeReference_1.getV3ClientTypeReference)(j, { v2ClientName, v2ClientTypeName, v2ClientLocalName });
        });
    }
};
exports.replaceTSTypeReference = replaceTSTypeReference;
