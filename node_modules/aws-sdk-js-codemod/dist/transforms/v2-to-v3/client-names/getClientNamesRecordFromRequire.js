"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getClientNamesRecordFromRequire = void 0;
const config_1 = require("../config");
const modules_1 = require("../modules");
const utils_1 = require("../utils");
const getRequireIds_1 = require("./getRequireIds");
const getClientNamesRecordFromRequire = (j, source, clientNamesFromDeepImport) => {
    const clientNamesRecord = {};
    const idPropertiesFromObjectPattern = (0, getRequireIds_1.getRequireIds)(j, source, config_1.PACKAGE_NAME)
        .filter((id) => id.type === "ObjectPattern")
        .map((objectPattern) => objectPattern.properties)
        .flat();
    for (const idProperty of idPropertiesFromObjectPattern) {
        if (!config_1.OBJECT_PROPERTY_TYPE_LIST.includes(idProperty.type)) {
            continue;
        }
        const key = idProperty.key;
        const value = idProperty.value;
        if (key.type !== "Identifier" || value.type !== "Identifier") {
            continue;
        }
        if (config_1.CLIENT_NAMES.includes(key.name)) {
            clientNamesRecord[key.name] = value.name;
        }
    }
    const declaratorsWithProperty = (0, modules_1.getRequireDeclaratorsWithProperty)(j, source, {
        sourceValue: config_1.PACKAGE_NAME,
    }).nodes();
    for (const declaratorWithProperty of declaratorsWithProperty) {
        const { id, init } = declaratorWithProperty;
        if (id.type === "Identifier" &&
            init != undefined &&
            init.type === "MemberExpression" &&
            init.property.type === "Identifier") {
            const clientName = init.property.name;
            if (config_1.CLIENT_NAMES.includes(clientName)) {
                clientNamesRecord[clientName] = id.name;
            }
        }
    }
    for (const clientName of clientNamesFromDeepImport) {
        const deepImportPath = (0, utils_1.getClientDeepImportPath)(clientName);
        const idsFromDefaultImport = (0, getRequireIds_1.getRequireIds)(j, source, deepImportPath).filter((id) => id.type === "Identifier");
        if (idsFromDefaultImport.length) {
            clientNamesRecord[clientName] = idsFromDefaultImport[0].name;
        }
    }
    return clientNamesRecord;
};
exports.getClientNamesRecordFromRequire = getClientNamesRecordFromRequire;
