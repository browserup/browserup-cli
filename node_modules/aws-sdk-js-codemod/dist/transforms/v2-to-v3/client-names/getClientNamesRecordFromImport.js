"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getClientNamesRecordFromImport = void 0;
const config_1 = require("../config");
const modules_1 = require("../modules");
const modules_2 = require("../modules");
const utils_1 = require("../utils");
const getClientNamesRecordFromImport = (j, source, clientNamesFromDeepImport) => {
    const clientNamesRecord = {};
    const specifiersFromNamedImport = (0, modules_2.getImportSpecifiers)(j, source, config_1.PACKAGE_NAME).filter((specifier) => specifier?.type === "ImportSpecifier");
    for (const specifier of specifiersFromNamedImport) {
        const importedName = specifier.imported.name;
        const localName = specifier.local.name;
        if (config_1.CLIENT_NAMES.includes(importedName)) {
            clientNamesRecord[importedName] = localName ?? importedName;
        }
    }
    for (const clientName of clientNamesFromDeepImport) {
        const deepImportPath = (0, utils_1.getClientDeepImportPath)(clientName);
        const specifiersFromDeepImport = (0, modules_2.getImportSpecifiers)(j, source, deepImportPath).filter((specifier) => ["ImportDefaultSpecifier", "ImportNamespaceSpecifier"].includes(specifier?.type));
        if (specifiersFromDeepImport.length > 0) {
            clientNamesRecord[clientName] = (specifiersFromDeepImport[0]?.local).name;
        }
        const identifiersFromImportEquals = source.find(j.TSImportEqualsDeclaration, (0, modules_1.getImportEqualsDeclarationType)(deepImportPath));
        if (identifiersFromImportEquals.length > 0) {
            clientNamesRecord[clientName] = identifiersFromImportEquals.nodes()[0]?.id.name;
        }
    }
    return clientNamesRecord;
};
exports.getClientNamesRecordFromImport = getClientNamesRecordFromImport;
