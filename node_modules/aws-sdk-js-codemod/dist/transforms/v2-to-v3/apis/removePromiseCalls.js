"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.removePromiseCalls = void 0;
const getClientIdentifiers_1 = require("./getClientIdentifiers");
const removePromiseForCallExpression_1 = require("./removePromiseForCallExpression");
// Removes .promise() from client API calls.
const removePromiseCalls = (j, source, options) => {
    const clientIdentifiers = (0, getClientIdentifiers_1.getClientIdentifiers)(j, source, options);
    for (const clientId of clientIdentifiers) {
        // Remove .promise() from client API calls.
        source
            .find(j.CallExpression, {
            callee: {
                type: "MemberExpression",
                object: {
                    type: "CallExpression",
                    callee: {
                        type: "MemberExpression",
                        object: clientId,
                    },
                },
                property: { type: "Identifier", name: "promise" },
            },
        })
            .forEach((callExpression) => {
            (0, removePromiseForCallExpression_1.removePromiseForCallExpression)(j, callExpression);
        });
        // Remove .promise() from client API request stored in a variable.
        source
            .find(j.VariableDeclarator, {
            id: { type: "Identifier" },
            init: {
                type: "CallExpression",
                callee: {
                    type: "MemberExpression",
                    object: clientId,
                },
            },
        })
            .forEach((variableDeclarator) => {
            source
                .find(j.CallExpression, {
                callee: {
                    type: "MemberExpression",
                    object: {
                        type: "Identifier",
                        name: variableDeclarator.value.id.name,
                    },
                    property: { type: "Identifier", name: "promise" },
                },
            })
                .forEach((callExpression) => {
                (0, removePromiseForCallExpression_1.removePromiseForCallExpression)(j, callExpression);
            });
        });
    }
};
exports.removePromiseCalls = removePromiseCalls;
