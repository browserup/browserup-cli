"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.waitUntilGroupNotExists = exports.waitForGroupNotExists = void 0;
const util_waiter_1 = require("@aws-sdk/util-waiter");
const DescribeAutoScalingGroupsCommand_1 = require("../commands/DescribeAutoScalingGroupsCommand");
const checkState = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeAutoScalingGroupsCommand_1.DescribeAutoScalingGroupsCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                return result.AutoScalingGroups.length > 0.0;
            };
            if (returnComparator() == false) {
                return { state: util_waiter_1.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                return result.AutoScalingGroups.length > 0.0;
            };
            if (returnComparator() == true) {
                return { state: util_waiter_1.WaiterState.RETRY, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: util_waiter_1.WaiterState.RETRY, reason };
};
const waitForGroupNotExists = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
};
exports.waitForGroupNotExists = waitForGroupNotExists;
const waitUntilGroupNotExists = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    return (0, util_waiter_1.checkExceptions)(result);
};
exports.waitUntilGroupNotExists = waitUntilGroupNotExists;
