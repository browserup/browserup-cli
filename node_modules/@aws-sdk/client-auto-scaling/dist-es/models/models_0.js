import { AutoScalingServiceException as __BaseException } from "./AutoScalingServiceException";
export const AcceleratorManufacturer = {
    AMAZON_WEB_SERVICES: "amazon-web-services",
    AMD: "amd",
    NVIDIA: "nvidia",
    XILINX: "xilinx",
};
export const AcceleratorName = {
    A100: "a100",
    K80: "k80",
    M60: "m60",
    RADEON_PRO_V520: "radeon-pro-v520",
    T4: "t4",
    V100: "v100",
    VU9P: "vu9p",
};
export const AcceleratorType = {
    FPGA: "fpga",
    GPU: "gpu",
    INFERENCE: "inference",
};
export class ActiveInstanceRefreshNotFoundFault extends __BaseException {
    constructor(opts) {
        super({
            name: "ActiveInstanceRefreshNotFoundFault",
            $fault: "client",
            ...opts,
        });
        this.name = "ActiveInstanceRefreshNotFoundFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, ActiveInstanceRefreshNotFoundFault.prototype);
    }
}
export const ScalingActivityStatusCode = {
    Cancelled: "Cancelled",
    Failed: "Failed",
    InProgress: "InProgress",
    MidLifecycleAction: "MidLifecycleAction",
    PendingSpotBidPlacement: "PendingSpotBidPlacement",
    PreInService: "PreInService",
    Successful: "Successful",
    WaitingForConnectionDraining: "WaitingForConnectionDraining",
    WaitingForELBConnectionDraining: "WaitingForELBConnectionDraining",
    WaitingForInstanceId: "WaitingForInstanceId",
    WaitingForInstanceWarmup: "WaitingForInstanceWarmup",
    WaitingForSpotInstanceId: "WaitingForSpotInstanceId",
    WaitingForSpotInstanceRequestId: "WaitingForSpotInstanceRequestId",
};
export class AlreadyExistsFault extends __BaseException {
    constructor(opts) {
        super({
            name: "AlreadyExistsFault",
            $fault: "client",
            ...opts,
        });
        this.name = "AlreadyExistsFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, AlreadyExistsFault.prototype);
    }
}
export class ResourceContentionFault extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceContentionFault",
            $fault: "server",
            ...opts,
        });
        this.name = "ResourceContentionFault";
        this.$fault = "server";
        Object.setPrototypeOf(this, ResourceContentionFault.prototype);
    }
}
export class ServiceLinkedRoleFailure extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceLinkedRoleFailure",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceLinkedRoleFailure";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceLinkedRoleFailure.prototype);
    }
}
export class LimitExceededFault extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededFault",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededFault.prototype);
    }
}
export const BareMetal = {
    EXCLUDED: "excluded",
    INCLUDED: "included",
    REQUIRED: "required",
};
export const BurstablePerformance = {
    EXCLUDED: "excluded",
    INCLUDED: "included",
    REQUIRED: "required",
};
export const CpuManufacturer = {
    AMAZON_WEB_SERVICES: "amazon-web-services",
    AMD: "amd",
    INTEL: "intel",
};
export const InstanceGeneration = {
    CURRENT: "current",
    PREVIOUS: "previous",
};
export const LocalStorage = {
    EXCLUDED: "excluded",
    INCLUDED: "included",
    REQUIRED: "required",
};
export const LocalStorageType = {
    HDD: "hdd",
    SSD: "ssd",
};
export const InstanceMetadataEndpointState = {
    Disabled: "disabled",
    Enabled: "enabled",
};
export const InstanceMetadataHttpTokensState = {
    Optional: "optional",
    Required: "required",
};
export class ResourceInUseFault extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceInUseFault",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceInUseFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceInUseFault.prototype);
    }
}
export class ScalingActivityInProgressFault extends __BaseException {
    constructor(opts) {
        super({
            name: "ScalingActivityInProgressFault",
            $fault: "client",
            ...opts,
        });
        this.name = "ScalingActivityInProgressFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, ScalingActivityInProgressFault.prototype);
    }
}
export const LifecycleState = {
    DETACHED: "Detached",
    DETACHING: "Detaching",
    ENTERING_STANDBY: "EnteringStandby",
    IN_SERVICE: "InService",
    PENDING: "Pending",
    PENDING_PROCEED: "Pending:Proceed",
    PENDING_WAIT: "Pending:Wait",
    QUARANTINED: "Quarantined",
    STANDBY: "Standby",
    TERMINATED: "Terminated",
    TERMINATING: "Terminating",
    TERMINATING_PROCEED: "Terminating:Proceed",
    TERMINATING_WAIT: "Terminating:Wait",
    WARMED_HIBERNATED: "Warmed:Hibernated",
    WARMED_PENDING: "Warmed:Pending",
    WARMED_PENDING_PROCEED: "Warmed:Pending:Proceed",
    WARMED_PENDING_WAIT: "Warmed:Pending:Wait",
    WARMED_RUNNING: "Warmed:Running",
    WARMED_STOPPED: "Warmed:Stopped",
    WARMED_TERMINATED: "Warmed:Terminated",
    WARMED_TERMINATING: "Warmed:Terminating",
    WARMED_TERMINATING_PROCEED: "Warmed:Terminating:Proceed",
    WARMED_TERMINATING_WAIT: "Warmed:Terminating:Wait",
};
export const WarmPoolState = {
    Hibernated: "Hibernated",
    Running: "Running",
    Stopped: "Stopped",
};
export const WarmPoolStatus = {
    PendingDelete: "PendingDelete",
};
export class InvalidNextToken extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidNextToken",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidNextToken";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNextToken.prototype);
    }
}
export const ScaleInProtectedInstances = {
    Ignore: "Ignore",
    Refresh: "Refresh",
    Wait: "Wait",
};
export const StandbyInstances = {
    Ignore: "Ignore",
    Terminate: "Terminate",
    Wait: "Wait",
};
export const InstanceRefreshStatus = {
    Cancelled: "Cancelled",
    Cancelling: "Cancelling",
    Failed: "Failed",
    InProgress: "InProgress",
    Pending: "Pending",
    RollbackFailed: "RollbackFailed",
    RollbackInProgress: "RollbackInProgress",
    RollbackSuccessful: "RollbackSuccessful",
    Successful: "Successful",
};
export const PredictiveScalingMaxCapacityBreachBehavior = {
    HonorMaxCapacity: "HonorMaxCapacity",
    IncreaseMaxCapacity: "IncreaseMaxCapacity",
};
export const PredefinedLoadMetricType = {
    ALBTargetGroupRequestCount: "ALBTargetGroupRequestCount",
    ASGTotalCPUUtilization: "ASGTotalCPUUtilization",
    ASGTotalNetworkIn: "ASGTotalNetworkIn",
    ASGTotalNetworkOut: "ASGTotalNetworkOut",
};
export const PredefinedMetricPairType = {
    ALBRequestCount: "ALBRequestCount",
    ASGCPUUtilization: "ASGCPUUtilization",
    ASGNetworkIn: "ASGNetworkIn",
    ASGNetworkOut: "ASGNetworkOut",
};
export const PredefinedScalingMetricType = {
    ALBRequestCountPerTarget: "ALBRequestCountPerTarget",
    ASGAverageCPUUtilization: "ASGAverageCPUUtilization",
    ASGAverageNetworkIn: "ASGAverageNetworkIn",
    ASGAverageNetworkOut: "ASGAverageNetworkOut",
};
export const PredictiveScalingMode = {
    ForecastAndScale: "ForecastAndScale",
    ForecastOnly: "ForecastOnly",
};
export const MetricStatistic = {
    Average: "Average",
    Maximum: "Maximum",
    Minimum: "Minimum",
    SampleCount: "SampleCount",
    Sum: "Sum",
};
export const MetricType = {
    ALBRequestCountPerTarget: "ALBRequestCountPerTarget",
    ASGAverageCPUUtilization: "ASGAverageCPUUtilization",
    ASGAverageNetworkIn: "ASGAverageNetworkIn",
    ASGAverageNetworkOut: "ASGAverageNetworkOut",
};
export class IrreversibleInstanceRefreshFault extends __BaseException {
    constructor(opts) {
        super({
            name: "IrreversibleInstanceRefreshFault",
            $fault: "client",
            ...opts,
        });
        this.name = "IrreversibleInstanceRefreshFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, IrreversibleInstanceRefreshFault.prototype);
    }
}
export class InstanceRefreshInProgressFault extends __BaseException {
    constructor(opts) {
        super({
            name: "InstanceRefreshInProgressFault",
            $fault: "client",
            ...opts,
        });
        this.name = "InstanceRefreshInProgressFault";
        this.$fault = "client";
        Object.setPrototypeOf(this, InstanceRefreshInProgressFault.prototype);
    }
}
export const RefreshStrategy = {
    Rolling: "Rolling",
};
