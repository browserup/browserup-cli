import { checkExceptions, createWaiter, WaiterState } from "@aws-sdk/util-waiter";
import { DescribeAutoScalingGroupsCommand, } from "../commands/DescribeAutoScalingGroupsCommand";
const checkState = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeAutoScalingGroupsCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.AutoScalingGroups);
                const projection_3 = flat_1.map((element_2) => {
                    const filterRes_5 = element_2.Instances.filter((element_4) => {
                        return element_4.LifecycleState == "InService";
                    });
                    const result_6 = [];
                    result_6.push(filterRes_5.length >= element_2.MinSize);
                    element_2 = result_6;
                    return element_2;
                });
                const flat_7 = [].concat(...projection_3);
                return flat_7.includes(false);
            };
            if (returnComparator() == false) {
                return { state: WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.AutoScalingGroups);
                const projection_3 = flat_1.map((element_2) => {
                    const filterRes_5 = element_2.Instances.filter((element_4) => {
                        return element_4.LifecycleState == "InService";
                    });
                    const result_6 = [];
                    result_6.push(filterRes_5.length >= element_2.MinSize);
                    element_2 = result_6;
                    return element_2;
                });
                const flat_7 = [].concat(...projection_3);
                return flat_7.includes(false);
            };
            if (returnComparator() == true) {
                return { state: WaiterState.RETRY, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: WaiterState.RETRY, reason };
};
export const waitForGroupInService = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return createWaiter({ ...serviceDefaults, ...params }, input, checkState);
};
export const waitUntilGroupInService = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await createWaiter({ ...serviceDefaults, ...params }, input, checkState);
    return checkExceptions(result);
};
