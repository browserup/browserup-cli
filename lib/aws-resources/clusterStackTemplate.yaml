AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Browserup cluster
Parameters:
  EcsClusterName:
    Type: String
    Description: >
      Specifies the ECS Cluster Name with which the resources would be
      associated
    Default: default
  X86AmiId:
    Type: String
  Arm64AmiId:
    Type: String
  KeyName:
    Type: String
    Description: >
      Optional - Specifies the name of an existing Amazon EC2 key pair
      to enable SSH access to the EC2 instances in Browserup cluster (for debugging purpose)
    Default: ''
  LogsRetentionInDays:
    Type: Number
    Description: >
      Optional - Specifies logs retention in days
    Default: 7
  VpcId:
    Type: String
    Description: >
      Optional - Specifies the ID of an existing VPC in which to launch
      your container instances. If you specify a VPC ID, you must specify a list of
      existing subnets in that VPC. If you do not specify a VPC ID, a new VPC is created
      with at least 1 subnet.
    Default: ''
    ConstraintDescription: >
      VPC Id must begin with 'vpc-' or leave blank to have a
      new VPC created
  SubnetIds:
    Type: CommaDelimitedList
    Description: >
      Optional - Specifies the Comma separated list of existing VPC Subnet
      Ids where ECS instances will run
    Default: ''
  PrivateSubnetIds:
    Type: CommaDelimitedList
    Description: >
      Optional - Specifies the Comma separated list of existing VPC Subnet
      Ids where ECS instances will run
    Default: ''
  VpcCidr:
    Type: String
    Description: Optional - Specifies the CIDR Block of VPC
    Default: '10.0.0.0/16'
  SubnetCidr1:
    Type: String
    Description: Specifies the CIDR Block of Subnet 1
    Default: '10.0.0.0/24'
  SubnetCidr2:
    Type: String
    Description: Specifies the CIDR Block of Subnet 2
    Default: '10.0.1.0/24'
  SubnetCidr3:
    Type: String
    Description: Specifies the CIDR Block of Subnet 3
    Default: '10.0.2.0/24'
  PrivateSubnetCidr1:
    Type: String
    Description: Specifies the CIDR Block of Private Subnet 1
    Default: '10.0.3.0/24'
  PrivateSubnetCidr2:
    Type: String
    Description: Specifies the CIDR Block of Private Subnet 2
    Default: '10.0.4.0/24'
  PrivateSubnetCidr3:
    Type: String
    Description: Specifies the CIDR Block of Private Subnet 3
    Default: '10.0.5.0/24'
  AsgMaxSize:
    Type: Number
    Description: >
      Specifies the number of instances to launch and register to the cluster.
      Defaults to 1.
    Default: '1'
  S3MinioIngressPort:
    Type: Number
    Description: >
      Specifies ingress port for public endpoint of minio S3
  WcIngressPort:
    Type: Number
    Description: >
      Specifies ingress port for public endpoint of WC
  GrafanaIngressPort:
    Type: Number
  VpcAvailabilityZones:
    Type: CommaDelimitedList
    Description: >
      Specifies a comma-separated list of 3 VPC Availability Zones for
      the creation of new subnets. These zones must have the available status.
    Default: ''
  EbsVolumeSize:
    Type: Number
    Description: >
      Optional - Specifies the Size in GBs of the data storage EBS volume used by the Docker in the AL1 ECS-optimized AMI
    Default: 22
  EbsVolumeType:
    Type: String
    Description: Optional - Specifies the Type of (Amazon EBS) volume
    Default: 'gp2'
    AllowedValues:
      - ''
      - standard
      - io1
      - gp2
      - sc1
      - st1
    ConstraintDescription: Must be a valid EC2 volume type.
  DeviceName:
    Type: String
    Description: Optional - Specifies the device mapping for the EBS volume used for data storage. Only applicable to AL1.
    Default: /dev/xvdcz
  LiveLogsViewerAccessFromCidrIp:
    Type: String
    Default: '0.0.0.0/32'
  AllowSshAccessToClusterFromCidr:
    Type: String
    Default: '0.0.0.0/32'
  PrivateDnsNamespaceName:
    Type: String
  GrafanaDatasourceYaml:
    Type: String
  GrafanaDashboardsProviderYaml:
    Type: String
  FluentBitConfig:
    Type: String
  LokiConfig:
    Type: String
  PrometheusConfig:
    Type: String
  ZookeeperConfig:
    Type: String
Conditions:
  IsSshAccessToClusterEnabled:
    !Not [!Equals [!Ref AllowSshAccessToClusterFromCidr, '0.0.0.0/32']]
  IsKeyPairProvided:
    !Not [!Equals [!Ref KeyName, '']]
  CreateNewVpc:
    !Equals [!Ref VpcId, '']
  CreateSubnet1: !And
    - !Not [!Equals [!Ref SubnetCidr1, '']]
    - !Condition CreateNewVpc
  CreateSubnet2: !And
    - !Not [!Equals [!Ref SubnetCidr2, '']]
    - !Condition CreateSubnet1
  CreateSubnet3: !And
    - !Not [!Equals [!Ref SubnetCidr3, '']]
    - !Condition CreateSubnet2
  CreatePrivateSubnet1: !And
    - !Not [!Equals [!Ref PrivateSubnetCidr1, '']]
    - !Condition CreateNewVpc
  CreatePrivateSubnet2: !And
    - !Not [!Equals [!Ref PrivateSubnetCidr2, '']]
    - !Condition CreatePrivateSubnet1
  CreatePrivateSubnet3: !And
    - !Not [!Equals [!Ref PrivateSubnetCidr3, '']]
    - !Condition CreatePrivateSubnet2

Resources:
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref EcsClusterName
  EcsInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: BrowserupEcsInstanceRole
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
  TaskDefinitionsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      RoleName: BrowserupTaskDefinitionsRole
  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: "EcsInstanceRole"
  Vpc:
    Condition: CreateSubnet1
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
  PrivateNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: !Ref PrivateDnsNamespaceName
      Vpc: !Ref Vpc
  PubSubnetAz1:
    Condition: CreateSubnet1
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidr1
      AvailabilityZone: !Select [ 0, !Ref VpcAvailabilityZones ]
      MapPublicIpOnLaunch: true
  PubSubnetAz2:
    Condition: CreateSubnet2
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidr2
      AvailabilityZone: !Select [ 1, !Ref VpcAvailabilityZones ]
      MapPublicIpOnLaunch: true
  PubSubnetAz3:
    Condition: CreateSubnet3
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidr3
      AvailabilityZone: !Select [ 2, !Ref VpcAvailabilityZones ]
      MapPublicIpOnLaunch: true
  PrivateSubnetAz1:
    Condition: CreatePrivateSubnet1
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivateSubnetCidr1
      AvailabilityZone: !Select [ 0, !Ref VpcAvailabilityZones ]
      MapPublicIpOnLaunch: false
  PrivateSubnetAz2:
    Condition: CreatePrivateSubnet2
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivateSubnetCidr2
      AvailabilityZone: !Select [ 1, !Ref VpcAvailabilityZones ]
      MapPublicIpOnLaunch: false
  PrivateSubnetAz3:
    Condition: CreatePrivateSubnet3
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivateSubnetCidr3
      AvailabilityZone: !Select [ 2, !Ref VpcAvailabilityZones ]
      MapPublicIpOnLaunch: false
  InternetGateway:
    Condition: CreateSubnet1
    Type: AWS::EC2::InternetGateway
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PubSubnetAz1
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  RouteTableViaNATGateway:
    Condition: CreateSubnet1
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
  RouteNATGateway:
    DependsOn: NATGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTableViaNATGateway
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NATGateway
  AttachGateway:
    Condition: CreateSubnet1
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
  RouteViaIgw:
    Condition: CreateSubnet1
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
  PublicRouteViaIgw:
    Condition: CreateSubnet1
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteViaIgw
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PubSubnet1RouteTableAssociation:
    Condition: CreateSubnet1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnetAz1
      RouteTableId: !Ref RouteViaIgw
  PubSubnet2RouteTableAssociation:
    Condition: CreateSubnet2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnetAz2
      RouteTableId: !Ref RouteViaIgw
  PubSubnet3RouteTableAssociation:
    Condition: CreateSubnet3
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnetAz3
      RouteTableId: !Ref RouteViaIgw
  PrivateSubnet1RouteTableAssociation:
    Condition: CreatePrivateSubnet1
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetAz1
      RouteTableId: !Ref RouteTableViaNATGateway
  PrivateSubnet2RouteTableAssociation:
    Condition: CreatePrivateSubnet2
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetAz2
      RouteTableId: !Ref RouteTableViaNATGateway
  PrivateSubnet3RouteTableAssociation:
    Condition: CreatePrivateSubnet3
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetAz3
      RouteTableId: !Ref RouteTableViaNATGateway
  NginxSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Allowed Ports
      VpcId: !If [ CreateSubnet1, !Ref Vpc, !Ref VpcId ]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref WcIngressPort
          ToPort: !Ref WcIngressPort
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: !Ref GrafanaIngressPort
          ToPort: !Ref GrafanaIngressPort
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: !Ref S3MinioIngressPort
          ToPort: !Ref S3MinioIngressPort
          CidrIp: 0.0.0.0/0
        - !If
          - IsSshAccessToClusterEnabled
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Ref AllowSshAccessToClusterFromCidr
          - !Ref AWS::NoValue
  X86ServicesLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: EcsInstanceRole
    Properties:
      LaunchTemplateName: X86ServicesLaunchTemplate
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: !Ref DeviceName
            Ebs:
              VolumeSize: !Ref EbsVolumeSize
              VolumeType: !Ref EbsVolumeType
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe                                                                              
            echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config;
        IamInstanceProfile:
          Arn: !GetAtt
            - IAMInstanceProfile
            - Arn
        DisableApiTermination: true
        ImageId: !Ref X86AmiId
        InstanceType: t2.medium
        KeyName: !If [ IsKeyPairProvided, !Ref KeyName, !Ref "AWS::NoValue" ]
  Arm64ServicesLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: EcsInstanceRole
    Properties:
      LaunchTemplateName: Arm64ServicesLaunchTemplate
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: !Ref DeviceName
            Ebs:
              VolumeSize: !Ref EbsVolumeSize
              VolumeType: !Ref EbsVolumeType
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe         
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Arm64ServicesLaunchTemplate --region ${AWS::Region}
            echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config;
        IamInstanceProfile:
          Arn: !GetAtt
            - IAMInstanceProfile
            - Arn
        DisableApiTermination: true
        ImageId: !Ref Arm64AmiId
        KeyName: !If [ IsKeyPairProvided, !Ref KeyName, !Ref "AWS::NoValue" ]
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/zookeeper/zoo.cfg:
              content: !Ref ZookeeperConfig
              mode: "000644"
              owner: "root"
              group: "root"
            /etc/prometheus/prometheus.yml:
              content: !Ref PrometheusConfig
              mode: "000644"
              owner: "root"
              group: "root"
            /fluent-bit/etc/fluent-bit.conf:
              content: !Ref FluentBitConfig
              mode: "000644"
              owner: "root"
              group: "root"
            /etc/loki/local-config.yaml:
              content: !Ref LokiConfig
              mode: "000644"
              owner: "root"
              group: "root"
            /etc/grafana/provisioning/datasources/grafana-datasource.yaml:
              content: !Ref GrafanaDatasourceYaml
              mode: "000644"
              owner: "root"
              group: "root"
            /etc/grafana/provisioning/dashboards/grafana-dashboards-provider.yaml:
              content: !Ref GrafanaDashboardsProviderYaml
              mode: "000644"
              owner: "root"
              group: "root"
          packages:
            yum:
              nfs-utils: []
  NginxLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: EcsInstanceRole
    Properties:
      LaunchTemplateName: NginxLaunchTemplate
      LaunchTemplateData:
        SecurityGroupIds:
          - !Ref NginxSecurityGroup
          - !GetAtt Vpc.DefaultSecurityGroup
        BlockDeviceMappings:
          - DeviceName: !Ref DeviceName
            Ebs:
              VolumeSize: !Ref EbsVolumeSize
              VolumeType: !Ref EbsVolumeType
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource NginxLaunchTemplate --region ${AWS::Region}
            echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config;
        IamInstanceProfile:
          Arn: !GetAtt
            - IAMInstanceProfile
            - Arn
        DisableApiTermination: true
        ImageId: !Ref Arm64AmiId
        KeyName: !If [ IsKeyPairProvided, !Ref KeyName, !Ref "AWS::NoValue" ]
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/nginx/nginx.conf:
              content: !Sub |
                events {
                    worker_connections 1024;
                }
                http {
                  map $http_upgrade $connection_upgrade {
                    default upgrade;
                    '' close;
                  }
                  server {
                    listen ${GrafanaIngressPort};
                    listen [::]:${GrafanaIngressPort};
                
                    location / {
                        proxy_set_header Host $http_host;
                        proxy_pass http://grafana.${PrivateDnsNamespaceName}:3000/;
                    }
                    
                    # Proxy Grafana Live WebSocket connections.
                    location /api/live/ {
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade $http_upgrade;
                      proxy_set_header Connection $connection_upgrade;
                      proxy_set_header Host $http_host;
                      proxy_pass http://grafana.${PrivateDnsNamespaceName}:3000/;
                    }
                  }
                  server {
                    listen ${WcIngressPort};
                    listen [::]:${WcIngressPort};
                
                    location / {
                      proxy_pass http://webconsole.${PrivateDnsNamespaceName}:3000/;
                    }
                  }
                  server {
                    listen ${S3MinioIngressPort};
                    listen [::]:${S3MinioIngressPort};
                
                    # Allow special characters in headers
                    ignore_invalid_headers off;
                    # Allow any size file to be uploaded.
                    # Set to a value such as 1000m; to restrict file size to a specific value
                    client_max_body_size 0;
                    # Disable buffering
                    proxy_buffering off;
                    proxy_request_buffering off;
                    
                    location / {                      
                      proxy_connect_timeout 300;
                      # Default is HTTP/1, keepalive is only enabled in HTTP/1.1
                      proxy_http_version 1.1;
                      chunked_transfer_encoding off;
                      
                      proxy_pass http://minio.${PrivateDnsNamespaceName}:9000/;
                    }
                    
                    location /minio-ui {
                      proxy_set_header Host $http_host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                      proxy_set_header X-NginX-Proxy true;
                      
                      # This is necessary to pass the correct IP to be hashed
                      real_ip_header X-Real-IP;
                      
                      proxy_connect_timeout 300;
                      
                      # To support websockets in MinIO versions released after January 2023
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade $http_upgrade;
                      proxy_set_header Connection "upgrade";
                      
                      chunked_transfer_encoding off;
                      
                      proxy_pass http://minio.${PrivateDnsNamespaceName}:9001/;
                    }                
                  }                
                }
              mode: "000644"
              owner: "root"
              group: "root"
          packages:
            yum:
              nfs-utils: []
  InfluxLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: EcsInstanceRole
    Properties:
      LaunchTemplateName: InfluxLaunchTemplate
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: !Ref DeviceName
            Ebs:
              VolumeSize: !Ref EbsVolumeSize
              VolumeType: !Ref EbsVolumeType
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config;
        IamInstanceProfile:
          Arn: !GetAtt
            - IAMInstanceProfile
            - Arn
        DisableApiTermination: true
        ImageId: !Ref Arm64AmiId
        KeyName: !If [ IsKeyPairProvided, !Ref KeyName, !Ref "AWS::NoValue" ]

  InfluxAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: EcsCluster
    Properties:
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandBaseCapacity: 1
          OnDemandAllocationStrategy: lowest-price
          OnDemandPercentageAboveBaseCapacity: 100
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref InfluxLaunchTemplate
            Version: !GetAtt InfluxLaunchTemplate.LatestVersionNumber
          Overrides:
            - InstanceType: a1.xlarge
            - InstanceType: c6g.xlarge
      VPCZoneIdentifier: !If
        - CreatePrivateSubnet1
        - !If
          - CreatePrivateSubnet2
          - !If
            - CreatePrivateSubnet3
            - [ !Sub "${PrivateSubnetAz1}, ${PrivateSubnetAz2}, ${PrivateSubnetAz3}" ]
            - [ !Sub "${PrivateSubnetAz1}, ${PrivateSubnetAz2}" ]
          - [ !Sub "${PrivateSubnetAz1}" ]
        - !Ref PrivateSubnetIds
      MinSize: 1
      MaxSize: 1
  X86ServicesAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: EcsCluster
    Properties:
      VPCZoneIdentifier: !If
        - CreatePrivateSubnet1
        - !If
          - CreatePrivateSubnet2
          - !If
            - CreatePrivateSubnet3
            - [ !Sub "${PrivateSubnetAz1}, ${PrivateSubnetAz2}, ${PrivateSubnetAz3}" ]
            - [ !Sub "${PrivateSubnetAz1}, ${PrivateSubnetAz2}" ]
          - [ !Sub "${PrivateSubnetAz1}" ]
        - !Ref PrivateSubnetIds
      LaunchTemplate:
        LaunchTemplateId: !Ref X86ServicesLaunchTemplate
        Version: !GetAtt X86ServicesLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 1
  Arm64ServicesAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: EcsCluster
    Properties:
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandBaseCapacity: 1
          OnDemandAllocationStrategy: lowest-price
          OnDemandPercentageAboveBaseCapacity: 100
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref Arm64ServicesLaunchTemplate
            Version: !GetAtt Arm64ServicesLaunchTemplate.LatestVersionNumber
          Overrides:
            - InstanceType: a1.large
            - InstanceType: c6g.large
      VPCZoneIdentifier: !If
        - CreatePrivateSubnet1
        - !If
          - CreatePrivateSubnet2
          - !If
            - CreatePrivateSubnet3
            - [ !Sub "${PrivateSubnetAz1}, ${PrivateSubnetAz2}, ${PrivateSubnetAz3}" ]
            - [ !Sub "${PrivateSubnetAz1}, ${PrivateSubnetAz2}" ]
          - [ !Sub "${PrivateSubnetAz1}" ]
        - !Ref PrivateSubnetIds
      MinSize: 5
      MaxSize: 5
  NginxAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: EcsCluster
    Properties:
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandBaseCapacity: 1
          OnDemandAllocationStrategy: lowest-price
          OnDemandPercentageAboveBaseCapacity: 100
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref NginxLaunchTemplate
            Version: !GetAtt NginxLaunchTemplate.LatestVersionNumber
          Overrides:
            - InstanceType: a1.medium
            - InstanceType: c6g.medium
      VPCZoneIdentifier: !If
        - CreateSubnet1
        - !If
          - CreateSubnet2
          - !If
            - CreateSubnet3
            - [ !Sub "${PubSubnetAz1}, ${PubSubnetAz2}, ${PubSubnetAz3}" ]
            - [ !Sub "${PubSubnetAz1}, ${PubSubnetAz2}" ]
          - [ !Sub "${PubSubnetAz1}" ]
        - !Ref SubnetIds
      MinSize: 1
      MaxSize: 1
  NginxCapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      Name: NginxCapacityProvider
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref NginxAsg
        ManagedScaling:
          Status: ENABLED
        ManagedTerminationProtection: DISABLED
  InfluxCapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      Name: InfluxCapacityProvider
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref InfluxAsg
        ManagedScaling:
          Status: ENABLED
        ManagedTerminationProtection: DISABLED
  X86CapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      Name: X86CapacityProvider
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref X86ServicesAsg
        ManagedScaling:
          Status: ENABLED
        ManagedTerminationProtection: DISABLED
  Arm64CapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      Name: Arm64CapacityProvider
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref Arm64ServicesAsg
        ManagedScaling:
          Status: ENABLED
        ManagedTerminationProtection: DISABLED
  ClusterCPAssociation:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      Cluster: !Ref EcsCluster
      CapacityProviders:
        - !Ref InfluxCapacityProvider
        - !Ref Arm64CapacityProvider
        - !Ref X86CapacityProvider
        - !Ref NginxCapacityProvider
      DefaultCapacityProviderStrategy:
        - CapacityProvider: !Ref InfluxCapacityProvider
          Weight: 1
        - CapacityProvider: !Ref Arm64CapacityProvider
          Weight: 1
        - CapacityProvider: !Ref X86CapacityProvider
          Weight: 1
        - CapacityProvider: !Ref NginxCapacityProvider
          Weight: 1
Outputs:
  NginxAsgId:
    Value: !Ref NginxAsg
  SgId:
    Value: !GetAtt Vpc.DefaultSecurityGroup
  VpcId:
    Value: !If [ CreateSubnet1, !Ref Vpc, !Ref VpcId ]
  TaskDefinitionsRoleArn:
    Value: !GetAtt TaskDefinitionsRole.Arn
  InstanceProfileArn:
    Value: !GetAtt IAMInstanceProfile.Arn
  EcsInstanceRoleArn:
    Value: !GetAtt EcsInstanceRole.Arn
  InfluxCapacityProviderName:
    Value: InfluxCapacityProvider
  ServicesCapacityProviderName:
    Value: ServicesCapacityProvider
  PrivateNamespaceId:
    Value: !GetAtt PrivateNamespace.Id
  PublicSubnetIds:
    Value: !Join
      - ','
      - !If
        - CreateSubnet1
        - !If
          - CreateSubnet2
          - !If
            - CreateSubnet3
            - [ !Sub "${PubSubnetAz1}, ${PubSubnetAz2}, ${PubSubnetAz3}" ]
            - [ !Sub "${PubSubnetAz1}, ${PubSubnetAz2}" ]
          - [ !Sub "${PubSubnetAz1}" ]
        - !Ref SubnetIds
  PrivateSubnetIds:
    Value: !Join
      - ','
      - !If
        - CreatePrivateSubnet1
        - !If
          - CreatePrivateSubnet2
          - !If
            - CreatePrivateSubnet3
            - [ !Sub "${PrivateSubnetAz1}, ${PrivateSubnetAz2}, ${PrivateSubnetAz3}" ]
            - [ !Sub "${PrivateSubnetAz1}, ${PrivateSubnetAz2}" ]
          - [ !Sub "${PrivateSubnetAz1}" ]
        - !Ref PrivateSubnetIds
  TemplateVersion:
    Description: The version of the template used by Create Cluster Wizard
    Value: '2.0.0'
